import java.util.ArrayList;

/**
 * The MemorySequence class represents all the logic behind the memory game and holds the array for the boxNumbers and a blank board
 * holds the number of columns and rows the grid is
 * holds the 2 array lists representing the sequence generated by random and the other representing the answer the user inputs
 * holds the score of the user
 * holds if they are playing the default game mod
 * holds the sequence length for each round
 * holds the random number generated by lightBox() method
 * holds the number of times ran/the total amount of time the user runs the sequences
 * holds the current high score
 * holds if the player is playing a competitive game mode
 */

public class MemorySequence {

   private String[][] boxNumbers;
   private String[][] blank;
   private int columns;
   private int rows;
   private final String DIV_LINE = "|----";
   private final String ANSI_RESET = "\u001B[0m";
   private final String ANSI_CYAN = "\u001B[36m";
   private static ArrayList<String> sequence = new ArrayList<String>();
   private static ArrayList<String> userInputAns = new ArrayList<String>();
   private static int score;
   private static boolean defaultSeq = true;
   private static int seqLen;
   private static int randBoxNum;
   private static int numTimesRan;
   private static int currentHighScore = 0;
   private static boolean comp = false;

   /**
    * Constructor for the MemorySequence class. This creates a new instance of MemorySequence and populates the lists of boxNumbers and blank with their respective values
    * depending on how many rows and columns the user wants
    *
    * @param c represents the number of columns of the grid
    * @param r represents the number of rows of the grid
    */
   public MemorySequence(int c, int r) {
      columns = c;
      rows = r;
      String[][] boxNumbers = new String[c][r];
      int count = 1;
      for (int column = 0; column < boxNumbers.length; column++) {
         for (int row = 0; row < boxNumbers[0].length; row++) {
            if (count < 10) {
               boxNumbers[column][row] = "0" + count;
            } else {
               boxNumbers[column][row] = "" + count;
            }

            count++;
         }
      }
      this.boxNumbers = boxNumbers;

      String[][] blank = new String[columns][rows];
      for (int column = 0; column < blank.length; column++) {
         for (int row = 0; row < blank[0].length; row++) {
            blank[column][row] = "  ";
         }
      }
      this.blank = blank;
   }

   /**
    * Constructor for the MemorySequence class. This creates a new instance of the MemorySequence object and populates the arrays of boxNumbers and blank
    * with default values
    */
   public MemorySequence() {
      columns = 5;
      rows = 5;
      String[][] boxNumbers = new String[columns][rows];
         int count = 1;
         for (int column = 0; column < boxNumbers.length; column++) {
            for (int row = 0; row < boxNumbers[0].length; row++) {
               if (count < 10) {
                  boxNumbers[column][row] = "0" + count;
               } else {
                  boxNumbers[column][row] = "" + count;
               }

               count++;
            }
         }
         this.boxNumbers = boxNumbers;

         String[][] blank = new String[columns][rows];
         for (int column = 0; column < blank.length; column++) {
            for (int row = 0; row < blank[0].length; row++) {
               blank[column][row] = "  ";
            }
         }
         this.blank = blank;
   }

   /**
    * printBox method for the MemorySequence class. This method will return a String that represents the grid that you see depending on the contents of the array list
    * @param array represents the 2d array of values that will be iterated through in put into a grid layout
    * @return a String that represents the grid you see
    */
   private String printBox (String[][] array) {
      String box = "";
      for (int x = 0; x < columns; x++) {
         box += DIV_LINE + "";
      }
      box += "|\n";

      for (int column = 0; column < array.length; column++) {
         for (int row = 0; row < array[0].length; row++) {
            box += "| " + array[column][row] + " ";
         }
         box += "|\n";
         for (int i = 0; i < columns; i++) {
            box += DIV_LINE + "";
         }
         box += "|\n";

      }
      return box;
   }

   /**
    * numBox method for the MemorySequence class. This method will return a String that contains the numbers inside the grid
    * @return a String that represents the grid that you see with numbers in each box
    */
   public String numBox() {
      return printBox(boxNumbers);
   }

   /**
    * emptyBox method for the MemorySequence class. This method will return a String that contains blank spaced inside the grid
    * @return a String that represents the grid that you see with spaces in each box
    */
   public String emptyBox() {
      return printBox(blank);
   }

   /**
    * lightBox method for the MemorySequence class. This method will return a String of blank box but with one tile populated with a character
    * @return a String that represents the grid that you see and the tile that "lights up" is the tile you are supposed to remember
    */
   public String lightBox() {

      String[][] blank2 = new String[columns][rows];
      for (int column = 0; column < blank.length; column++) {
         for (int row = 0; row < blank[0].length; row++) {
            blank2[column][row] = "  ";
         }
      }

      int ranCol = (int) (Math.random() * columns);
      int ranRow = (int) (Math.random() * rows);
      randBoxNum = (ranCol * columns) + ranRow + 1;
      sequence.add("" + randBoxNum);
      String displayChar = "";
      if (Settings.returnStatus()) {
         if (randBoxNum < 10) {
            displayChar = "0" + randBoxNum;
         } else {
            displayChar = randBoxNum + "";
         }
      } else {
         displayChar = "XX";
      }
      blank2[ranCol][ranRow] = ANSI_CYAN + displayChar + ANSI_RESET;

      return printBox(blank2);
   }

   /**
    * gameRunning method for the MemorySequence class. This method will return a boolean which represents is the game still running
    * @return a boolean that sees if what you enter is equal to the sequence randomly generated and if not, game over
    */
   public static boolean gameRunning() {
      return userInputAns.equals(sequence);
   }

   /**
    * setUserInputAns method for the MemorySequence class. This method will return void and just sets the instance variable of userInputAns to the arrayList inputed
    * @param userAns an ArrayList representing all the user inputs
    */
   public static void setUserInputAns(ArrayList<String> userAns) {
      userInputAns = userAns;
   }

   /**
    * calcScore method for the MemorySequence class. This method will return void, and it just calculates the score depending on what game mode you are playing
    * also holds the logic for setting the high score (in comp)
    */
   private static void calcScore() {
      if (userInputAns.size() == 0) {
         score = 0;
      } else {
         if (defaultSeq) {
            score = userInputAns.size() - 1;
         } else {
            score = numTimesRan - 1;
         }
      }
      if (comp) {
         if (score > currentHighScore) {
            currentHighScore = score;
         }
      }
   }

   /**
    * setSeqLen method for the MemorySequence class. This method will return void and just sets the instance variable seqLen to the inputted length
    * @param len an integer represents the length of the sequence that the user inputted
    */
   public void setSeqLen(int len) {
      seqLen = len;
   }

   /**
    * clearSeqList method for the MemorySequence class. This method will return void and just wipes out all the data values in the array list sequence
    * which represent the random sequence generated
    */
   public static void clearSeqList() {
      sequence.clear();
   }

   /**
    * clearAnswerList method for the MemorySequence class. This method will return void and just wipes out all the data values in the array list userInputAns
    * which represents a list of the user inputs
    */
   public static void clearAnswerList() {
      userInputAns.clear();
   }

   /**
    * changeSeq method for the MemorySequence class. This method will return void and changes defaultSeq to false if the user chooses to play a non-default game mode
    * (he wants to make his own seq length)
    */
   public static void changeSeq() {
      defaultSeq = false;
   }

   /**
    * updateNumTimesRan method for the MemorySequence class. This method will return void and updates the variable numTimesRan to a certain number that represents
    * how many rounds the user went on
    * @param num is an integer representing how many rounds the user has completed
    */
   public void updateNumTimesRan(int num) {
      numTimesRan = num;
   }

   /**
    * gameIsComp method for the MemorySequence class. This method will return void and updates the instance variable comp to true if
    * the user selects comp
    */
   public void gameIsComp() {
      comp = true;
   }

   /**
    * returnHighScore method for the MemorySequence class. This method will return an integer that represents the high score of the current runs
    * @return an integer that represents the user's current high score (only in the competitive game mode)
    */
   public int returnHighScore() {
      return currentHighScore;
   }

   /**
    * toString method for the MemorySequence class. This method will return a String that just tells the user that they are incorrect,
    * tells them the correct sequence and their score
    * @return a formatted String that tells them a summary of their gameplay including the answers to what they got wrong, and their score
    */
   public String toString() {
      calcScore();
      String response = "\nNot quite the sequence, nice try though.\n\n";
      String answerKey = "Here is the actual sequence: " + sequence;
      response += "\n\n" + answerKey;

      if(defaultSeq) {
         return response + "\n\nNice job, you completed sequences up to the length of " + score + "!" + "\n\n";
      } else {
         return response + "\n\nNice job, you had a practice session of " + score + " games with the sequence length of " + seqLen + "!" + "\n\n";
      }
   }
}
